{
  "nodes": [
    {
      "id": "18ad50e395522599",
      "type": "group",
      "styleAttributes": {
        "border": null
      },
      "x": 200,
      "y": -760,
      "width": 3480,
      "height": 2260,
      "label": "Storage"
    },
    {
      "id": "06c3c94ff03a064f",
      "type": "group",
      "styleAttributes": {},
      "x": 195,
      "y": 1560,
      "width": 3485,
      "height": 1880,
      "label": "Access"
    },
    {
      "id": "bc8a458f81b7529e",
      "type": "group",
      "styleAttributes": {},
      "x": 190,
      "y": 3600,
      "width": 3490,
      "height": 1240,
      "label": "Set-Oriented Query Processing"
    },
    {
      "id": "d9b7e6fe27e2289a",
      "type": "group",
      "styleAttributes": {},
      "x": 190,
      "y": 4960,
      "width": 2970,
      "height": 1024,
      "label": "Algebraic Operators"
    },
    {
      "id": "dc0723debf9d3ece",
      "type": "group",
      "styleAttributes": {},
      "x": 1280,
      "y": 3686,
      "width": 2345,
      "height": 1114,
      "label": "Operator Implementation"
    },
    {
      "id": "b1aa0dd719e65330",
      "type": "group",
      "styleAttributes": {},
      "x": 2206,
      "y": 1660,
      "width": 1419,
      "height": 1740,
      "label": "B Trees"
    },
    {
      "id": "3f6d4b6e1128e072",
      "type": "group",
      "styleAttributes": {},
      "x": 215,
      "y": 1919,
      "width": 1370,
      "height": 1481,
      "label": "Hashing"
    },
    {
      "id": "54edf63446437e2c",
      "type": "group",
      "styleAttributes": {},
      "x": 1590,
      "y": 0,
      "width": 920,
      "height": 1460,
      "label": "Slotted Pages"
    },
    {
      "id": "795cdbea48e95476",
      "type": "group",
      "styleAttributes": {},
      "x": 755,
      "y": 4980,
      "width": 1805,
      "height": 567,
      "label": "Inner Joins"
    },
    {
      "id": "b786a7eec0f31f29",
      "type": "group",
      "styleAttributes": {},
      "x": 470,
      "y": -680,
      "width": 781,
      "height": 1200,
      "label": "Buffer Management"
    },
    {
      "id": "5256150df55fb029",
      "type": "group",
      "styleAttributes": {},
      "x": 225,
      "y": 580,
      "width": 1009,
      "height": 841,
      "label": "Segments"
    },
    {
      "id": "c7f6002a3d5b3e56",
      "type": "group",
      "styleAttributes": {},
      "x": 2676,
      "y": 740,
      "width": 905,
      "height": 720,
      "label": "Free Space Inventory"
    },
    {
      "id": "4e28f9173920ddd0",
      "type": "group",
      "styleAttributes": {},
      "x": 2670,
      "y": -590,
      "width": 458,
      "height": 1020,
      "label": "Compression"
    },
    {
      "id": "1b1580da2b9aaf3b",
      "type": "group",
      "styleAttributes": {},
      "x": 260,
      "y": 4316,
      "width": 940,
      "height": 484,
      "label": "Implementing Subscripts"
    },
    {
      "id": "e19bb0bfcf42c7eb",
      "type": "group",
      "styleAttributes": {},
      "x": 755,
      "y": 5624,
      "width": 1072,
      "height": 340,
      "label": "Sort"
    },
    {
      "id": "f9a5d6e6ebdd415f",
      "type": "group",
      "styleAttributes": {},
      "x": 2250,
      "y": 5660,
      "width": 890,
      "height": 304,
      "label": "Set Operators"
    },
    {
      "id": "e1050a83ae181841",
      "type": "group",
      "styleAttributes": {},
      "x": 640,
      "y": 3686,
      "width": 500,
      "height": 505,
      "label": "Algebraic Model"
    },
    {
      "id": "e23de4404dfad79b",
      "type": "group",
      "styleAttributes": {},
      "x": 1804,
      "y": 3766,
      "width": 541,
      "height": 458,
      "label": "Iterator Model (Standard)"
    },
    {
      "id": "5f993d240e622e35",
      "type": "group",
      "styleAttributes": {},
      "x": 2640,
      "y": 5032,
      "width": 500,
      "height": 464,
      "label": "Non-Inner Joins"
    },
    {
      "id": "7ef59e1bf8e51969",
      "type": "group",
      "styleAttributes": {},
      "x": 1804,
      "y": 4360,
      "width": 488,
      "height": 395,
      "label": "Pushing Tuples Up"
    },
    {
      "id": "002b979a84919102",
      "type": "group",
      "styleAttributes": {},
      "x": 1184,
      "y": 1660,
      "width": 441,
      "height": 420,
      "label": "Bitmap indexes"
    },
    {
      "id": "f0e9e6645918c934",
      "type": "group",
      "styleAttributes": {},
      "x": 1320,
      "y": 4377,
      "width": 400,
      "height": 361,
      "label": "Blockwise Processing"
    },
    {
      "id": "88fb8fc0c7af39a3",
      "type": "group",
      "styleAttributes": {},
      "x": 1320,
      "y": 3766,
      "width": 400,
      "height": 340,
      "label": "Full Materialization"
    },
    {
      "id": "3c54aa2357974048",
      "type": "group",
      "styleAttributes": {},
      "x": 1880,
      "y": 5660,
      "width": 326,
      "height": 304,
      "label": "GroupBy"
    },
    {
      "id": "b2b4f50344715c80",
      "type": "group",
      "styleAttributes": {},
      "x": 3013,
      "y": 4107,
      "width": 300,
      "height": 300,
      "label": "Untitled group"
    },
    {
      "id": "c10bb6c9171ba0f2",
      "type": "group",
      "styleAttributes": {},
      "x": 1765,
      "y": 2040,
      "width": 300,
      "height": 260,
      "label": "Index Structures"
    },
    {
      "id": "a3d3fc2658c55798",
      "type": "text",
      "text": "### Dynamic extent mapping\n\n> pointers to ranges of pages -> best of both worlds: can grow with some overhead\n\n- grows exponentially\n- number of extents is bounded -> fits in page",
      "styleAttributes": {},
      "x": 730,
      "y": 1079,
      "width": 372,
      "height": 281
    },
    {
      "id": "32aa6feb6beb46e9",
      "type": "text",
      "text": "**update behavior**:\n- `force`: write all\n- `steal`: take memory\n",
      "styleAttributes": {},
      "x": 1350,
      "y": -608,
      "width": 260,
      "height": 140
    },
    {
      "id": "133b29e6c6012565",
      "type": "text",
      "text": "### Record Layout\n\n> instead of serializing, split tuples into fixed-sized header with pointer + tail\n",
      "styleAttributes": {},
      "x": 1536,
      "y": -389,
      "width": 455,
      "height": 133
    },
    {
      "id": "e8b322d55e2fb53f",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/FSI/Details.md",
      "styleAttributes": {},
      "x": 2696,
      "y": 780,
      "width": 680,
      "height": 660,
      "color": "8"
    },
    {
      "id": "f1d4b7a0954f003e",
      "type": "text",
      "text": "finding space for incoming data",
      "styleAttributes": {},
      "x": 3251,
      "y": 868,
      "width": 310,
      "height": 60,
      "color": "3"
    },
    {
      "id": "71db577d903fe77e",
      "type": "text",
      "text": "- free space bitmap\n- allocation: find page with enough free space, allocate space, update FSI",
      "styleAttributes": {},
      "x": 3251,
      "y": 1005,
      "width": 310,
      "height": 140,
      "color": "7"
    },
    {
      "id": "4999258d620a67e8",
      "type": "text",
      "text": "- `fix(pageNo, shared)`\n- `unfix(pageNo, dirty)`",
      "styleAttributes": {},
      "x": 892,
      "y": -362,
      "width": 320,
      "height": 80,
      "color": "6"
    },
    {
      "id": "17081ade73d7b013",
      "type": "text",
      "text": "- hash table of **buffer frames**\n- replaces pages in memory",
      "styleAttributes": {},
      "x": 892,
      "y": -233,
      "width": 320,
      "height": 100,
      "color": "7"
    },
    {
      "id": "937214675b57c1a8",
      "type": "text",
      "text": "manages pages\n- reduce I/O: keep active pages in memory, write back",
      "styleAttributes": {},
      "x": 892,
      "y": -72,
      "width": 320,
      "height": 140,
      "color": "3"
    },
    {
      "id": "496822119721f675",
      "type": "text",
      "text": "- *BTree was a Segment*\n- *Segments had their own buffer manager*\n- *segment id in 16 most significant bits, page id within segment in lower 48 bits*",
      "styleAttributes": {
        "border": "dotted"
      },
      "x": 245,
      "y": 782,
      "width": 325,
      "height": 198,
      "color": "7"
    },
    {
      "id": "a7cb7fe386425a60",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/images/Pasted image 20240423145701.png",
      "styleAttributes": {},
      "x": 500,
      "y": 993,
      "width": 141,
      "height": 172
    },
    {
      "id": "063bf32a196d0b65",
      "type": "text",
      "text": "### Static file mapping\n> start + length\n\nsimple but inflexible",
      "styleAttributes": {},
      "x": 245,
      "y": 1020,
      "width": 325,
      "height": 172
    },
    {
      "id": "a620e9e0c2479b72",
      "type": "text",
      "text": "**set of pages** treated as one entity\n- structures can span multiple pages\n- virtual address space",
      "styleAttributes": {},
      "x": 245,
      "y": 620,
      "width": 325,
      "height": 142,
      "color": "3"
    },
    {
      "id": "ba5bb5eaa05a565b",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/images/Pasted image 20240423145741.png",
      "styleAttributes": {},
      "x": 1068,
      "y": 1180,
      "width": 144,
      "height": 223
    },
    {
      "id": "ddad787d51e55cb8",
      "type": "text",
      "text": "### Dynamic block-mapping\n\npointers to single pages -> most flexible but a lot of overhead",
      "styleAttributes": {},
      "x": 245,
      "y": 1220,
      "width": 338,
      "height": 143
    },
    {
      "id": "4fe3ca9d57094282",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/images/Pasted image 20240423145809.png",
      "styleAttributes": {},
      "x": 550,
      "y": 1260,
      "width": 147,
      "height": 143
    },
    {
      "id": "18665ad50b656174",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Segments/Details.md",
      "styleAttributes": {},
      "x": 613,
      "y": 600,
      "width": 577,
      "height": 460,
      "color": "8"
    },
    {
      "id": "bcae98ec2fe87e04",
      "type": "text",
      "text": "### NULL values\n\n> unknown/unspecified/OOD values\n\ninvalid value if possible or NULL bit",
      "styleAttributes": {},
      "x": 1708,
      "y": -256,
      "width": 355,
      "height": 160
    },
    {
      "id": "fc3485f7fad72c99",
      "type": "text",
      "text": "**shadow paging**: page table, copy w/ dirty pages. bye bye locality\n",
      "styleAttributes": {},
      "x": 1752,
      "y": -650,
      "width": 400,
      "height": 90
    },
    {
      "id": "b4f2a1762d0e7758",
      "type": "text",
      "text": "**delta files**: pages copied on change. more IO",
      "styleAttributes": {},
      "x": 1752,
      "y": -510,
      "width": 400,
      "height": 80
    },
    {
      "id": "afee37ea12a932a3",
      "type": "text",
      "text": "TODO: Long Records (ch3/24-28)",
      "styleAttributes": {},
      "x": 2210,
      "y": -636,
      "width": 367,
      "height": 56,
      "color": "1"
    },
    {
      "id": "f5985ee0d558d2e1",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Slotted Pages/Details.md",
      "styleAttributes": {},
      "x": 1610,
      "y": 60,
      "width": 684,
      "height": 1380,
      "color": "8"
    },
    {
      "id": "a3787a5c0e584308",
      "type": "text",
      "text": "- `allocate(min, max)`\n- `relocate(slot_id, data_size)`\n- `compactify()`\n- `erase(slot_id)`",
      "styleAttributes": {},
      "x": 2214,
      "y": 380,
      "width": 260,
      "height": 173,
      "color": "6"
    },
    {
      "id": "2affff942175e560",
      "type": "text",
      "text": "- slots grow from one side (array), data from the other\n- compactification",
      "styleAttributes": {},
      "x": 2214,
      "y": 868,
      "width": 260,
      "height": 147,
      "color": "7"
    },
    {
      "id": "03520edbf3f461cc",
      "type": "text",
      "text": "TODO: more implementation details",
      "styleAttributes": {},
      "x": 1057,
      "y": 1046,
      "width": 390,
      "height": 60,
      "color": "1"
    },
    {
      "id": "9338bd03ff72bc26",
      "type": "text",
      "text": "# storing data",
      "styleAttributes": {},
      "x": 120,
      "y": -420,
      "width": 260,
      "height": 80
    },
    {
      "id": "1dc96520bd08a93c",
      "type": "text",
      "text": "# memory management ",
      "styleAttributes": {},
      "x": 120,
      "y": -570,
      "width": 265,
      "height": 105
    },
    {
      "id": "3c55b9f3d03d5e5f",
      "type": "text",
      "text": "#### special cases for storing things",
      "styleAttributes": {},
      "x": 2172,
      "y": -306,
      "width": 405,
      "height": 73,
      "color": "8"
    },
    {
      "id": "3ca2265f49e5aec8",
      "type": "text",
      "text": "- improve/reduce bandwidth consumption\n- compress individual tuples",
      "styleAttributes": {},
      "x": 2690,
      "y": -570,
      "width": 418,
      "height": 80,
      "color": "3"
    },
    {
      "id": "aef927c99becbb9c",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Compression/Details.md",
      "styleAttributes": {},
      "x": 2690,
      "y": -423,
      "width": 418,
      "height": 833
    },
    {
      "id": "b99940e85b8fec83",
      "type": "text",
      "text": "store tuples -> actually use page",
      "styleAttributes": {},
      "x": 2210,
      "y": 220,
      "width": 260,
      "height": 73,
      "color": "3"
    },
    {
      "id": "99841cd221f067b5",
      "type": "text",
      "text": "TODO: data types",
      "styleAttributes": {},
      "x": 1933,
      "y": 100,
      "width": 260,
      "height": 60,
      "color": "1"
    },
    {
      "id": "f7e1a26682fb776f",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Buffer Manager/Details.md",
      "styleAttributes": {},
      "x": 490,
      "y": -640,
      "width": 602,
      "height": 1135,
      "color": "8"
    },
    {
      "id": "7955b240d11570c4",
      "type": "text",
      "text": "### Multi-Dimensional Indexing\n\n**curse of dimensionality**: scan faster than indexing for high dim",
      "styleAttributes": {},
      "x": 763,
      "y": 1661,
      "width": 328,
      "height": 179
    },
    {
      "id": "3d37cea48b7c879a",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Hashing/Multi-Level Extendible Hashing.md",
      "styleAttributes": {},
      "x": 1145,
      "y": 2426,
      "width": 400,
      "height": 774
    },
    {
      "id": "5b30828bbbfab1bf",
      "type": "text",
      "text": "### Non-unique values\n\n> index values have to be unique\n\n- append TID (= tiebreaker)\n- needs more space, but $\\mathcal{O}(\\log n)$ access",
      "styleAttributes": {},
      "x": 1764,
      "y": 2632,
      "width": 397,
      "height": 181
    },
    {
      "id": "c96094504859416f",
      "type": "text",
      "text": "A\nR\nC\nH\nI\nT\nE\nC\nT\nU\nR\nE",
      "styleAttributes": {},
      "x": 0,
      "y": -760,
      "width": 80,
      "height": 4200,
      "color": "4"
    },
    {
      "id": "56ee2dd1eba1de27",
      "type": "text",
      "text": "### Hash-Join $\\Join_p^{HJ}$\n\n> build hashtable from $e_1$, probes with $e_2$\n\nif table does not fit in mem, use **external memory**: \n1. materialize left in memory, write to disk if full\n\t- can be sorted for sequential I/O\n2. make partitions that fit in memory -> define boundaries\n3. materialize right, write to disk (same boundaries)\n4. join partitions pair-wise\n\n**overflow partitions**: have only 1 hash value, but are larger than mem\n- use approach similar to nested-loop join when joining",
      "styleAttributes": {},
      "x": 2097,
      "y": 5000,
      "width": 443,
      "height": 525
    },
    {
      "id": "2c1446e1b922295f",
      "type": "text",
      "text": "| Operation       | Behavior                                         |\n| --------------- | ------------------------------------------------ |\n| `union`         | union w/ set semantics                           |\n| `union all`     | union w/ bag semantics                           |\n| `intersect`     | intersection w/ set semantics                    |\n| `intersect all` | intersection w/ bag semantics -> min count       |\n| `except`        | set diff w/ set semantics                        |\n| `except all`    | set diff w/ bag semantics -> $max(0, l_c - r_c)$ |\n",
      "styleAttributes": {},
      "x": 2270,
      "y": 5680,
      "width": 540,
      "height": 260
    },
    {
      "id": "9b779825ce16ee51",
      "type": "text",
      "text": "used in other operations",
      "styleAttributes": {},
      "x": 775,
      "y": 5644,
      "width": 260,
      "height": 60,
      "color": "3"
    },
    {
      "id": "742cc94be2d7e953",
      "type": "text",
      "text": "### Flush\n\nnaive\n- sort in-mem using quicksort\n- write all at once\n\ncomplex\n- heap sort w/ replacement selection\n- write out when needed -> longer runs",
      "styleAttributes": {},
      "x": 1063,
      "y": 5644,
      "width": 417,
      "height": 300,
      "color": "8"
    },
    {
      "id": "52007f0c0aa48b9c",
      "type": "text",
      "text": "### Merge\n\non-the-fly:\n- read in parallel\n- tree of losers/prio q -> always read smallest\n\nrepeated partial merges if too many runs",
      "styleAttributes": {},
      "x": 1480,
      "y": 5644,
      "width": 327,
      "height": 300,
      "color": "8"
    },
    {
      "id": "5704343e6979779e",
      "type": "text",
      "text": "1. load chunks int mem\n2. sort in-memory\n3. merge sorted runs\n4. recurse if needed",
      "styleAttributes": {},
      "x": 775,
      "y": 5724,
      "width": 260,
      "height": 140,
      "color": "7"
    },
    {
      "id": "5eb4a66685aa1a30",
      "type": "text",
      "text": "*External Sort*",
      "styleAttributes": {
        "border": "dotted"
      },
      "x": 775,
      "y": 5884,
      "width": 260,
      "height": 60
    },
    {
      "id": "41264f880ecb0244",
      "type": "text",
      "text": "### Blockwise nested-loop join $\\Join_p^{BNL}$\nmuch faster, suitable for everything except dependent joins\n\n>go over lhs in chunks\n",
      "styleAttributes": {},
      "x": 775,
      "y": 5367,
      "width": 536,
      "height": 160
    },
    {
      "id": "6ba61d125539727d",
      "type": "text",
      "text": "| Type  | Symbols                              | What tuples?                  |\n| ----- | ------------------------------------ | ----------------------------- |\n| outer | ![[Pasted image 20240725235232.png]] | matching + non+matching       |\n| semi  | ![[Pasted image 20240725235302.png]] | matching w/o multiplicity     |\n| anti  | ![[Pasted image 20240725235329.png]] | non-matching w/o multiplicity |\n",
      "styleAttributes": {},
      "x": 2660,
      "y": 5052,
      "width": 460,
      "height": 240
    },
    {
      "id": "141b8aa733022128",
      "type": "text",
      "text": "mark tuples with a join partner\n- easy for left bc usually in-mem\n- right may need extra data structure",
      "styleAttributes": {},
      "x": 2660,
      "y": 5332,
      "width": 460,
      "height": 144,
      "color": "7"
    },
    {
      "id": "50ad94f6ee2fe9e3",
      "type": "text",
      "text": "- set semantics: `std::unordered_set`\n- bag semantics: `std::unordered_map`\n\nto check for duplicates/record counts",
      "styleAttributes": {},
      "x": 2860,
      "y": 5680,
      "width": 260,
      "height": 260,
      "color": "7"
    },
    {
      "id": "52206d5410c9e280",
      "type": "text",
      "text": "does $e_2$ depend on $e_1$?",
      "styleAttributes": {},
      "x": 1221,
      "y": 5162,
      "width": 180,
      "height": 83,
      "color": "7"
    },
    {
      "id": "ce657fc8aab6809b",
      "type": "text",
      "text": "| Advantages           | Disadvantages              |\n| -------------------- | -------------------------- |\n| fewer function calls | more materialization       |\n| code + data locality | memory bandwidth           |\n|                      | less flexible control flow |\n",
      "styleAttributes": {
        "border": "invisible"
      },
      "x": 1290,
      "y": 4450,
      "width": 400,
      "height": 223
    },
    {
      "id": "974c2a35c806836c",
      "type": "text",
      "text": "### Interpreter Objects\n\n> subscripts assembled from interpreter objects\n\nflexible + easy to implement, but many virtual function calls",
      "styleAttributes": {},
      "x": 280,
      "y": 4336,
      "width": 468,
      "height": 200
    },
    {
      "id": "130e157f6ac3ffda",
      "type": "text",
      "text": "### Virtual Machines\n\n> subscripts compiled into VM instructions\n\nmore efficient but more complex",
      "styleAttributes": {},
      "x": 280,
      "y": 4560,
      "width": 400,
      "height": 200
    },
    {
      "id": "82505e0f0c2b1570",
      "type": "text",
      "text": "### Pre-compiled fragments\n\n- fragments perform number of operations\n- vectorization :3\n- only for column stores :c",
      "styleAttributes": {},
      "x": 762,
      "y": 4336,
      "width": 400,
      "height": 200
    },
    {
      "id": "a815e35213513144",
      "type": "text",
      "text": "aggregate values in groups",
      "styleAttributes": {},
      "x": 1900,
      "y": 5680,
      "width": 286,
      "height": 60,
      "color": "3"
    },
    {
      "id": "9671501d65502ed9",
      "type": "text",
      "text": "1. sort-based\n2. hash-based\n\nbeware of variable-length aggregates",
      "styleAttributes": {},
      "x": 1900,
      "y": 5784,
      "width": 286,
      "height": 160,
      "color": "7"
    },
    {
      "id": "08906c42a7c83995",
      "type": "text",
      "text": "is equijoin?\naka $p$ has form $e_1.a = e_2.b$",
      "styleAttributes": {},
      "x": 1478,
      "y": 5134,
      "width": 166,
      "height": 140,
      "color": "7"
    },
    {
      "id": "4d88b500c9455b3d",
      "type": "text",
      "text": "literally any of these",
      "styleAttributes": {},
      "x": 1740,
      "y": 5174,
      "width": 245,
      "height": 60,
      "color": "7"
    },
    {
      "id": "65ce556e21aa0237",
      "type": "text",
      "text": "### Sort-Merge Join $\\Join^{SM}_p$\nequi-join where inputs are sorted by join attributes\n\n> linear pass over entries UwU\n\nonly simple for 1:N",
      "styleAttributes": {},
      "x": 1600,
      "y": 5325,
      "width": 460,
      "height": 200
    },
    {
      "id": "5b98697860cbf7ae",
      "type": "text",
      "text": "### Nested-Loop Join $\\Join^{NL}_p$\nflexible, simple, inefficient\n\n> for every tuple of lhs: evaluate rhs",
      "styleAttributes": {},
      "x": 775,
      "y": 5186,
      "width": 359,
      "height": 153
    },
    {
      "id": "a5b546ee76f34a75",
      "type": "text",
      "text": "### Generated Machine Code\n\n> subscripts compiled into machine code at runtime\n\nmost efficient + complex, also what about portability?",
      "styleAttributes": {},
      "x": 702,
      "y": 4560,
      "width": 460,
      "height": 200
    },
    {
      "id": "1068d3c283555aca",
      "type": "text",
      "text": "- consume relation(s), produce 1 output relation\n- set/bag-oriented",
      "styleAttributes": {},
      "x": 660,
      "y": 3785,
      "width": 460,
      "height": 77,
      "color": "9"
    },
    {
      "id": "1be70e7f2fd64795",
      "type": "text",
      "text": "- generic operator implementation\n- flexible, combineable\n- only specify data + control flow\n- subscripts take care of the query-specific parts",
      "styleAttributes": {},
      "x": 660,
      "y": 3891,
      "width": 460,
      "height": 180,
      "color": "7"
    },
    {
      "id": "449e995c75b06d05",
      "type": "text",
      "text": "code independent from query",
      "styleAttributes": {
        "textAlign": "center",
        "border": "invisible"
      },
      "x": 716,
      "y": 4105,
      "width": 349,
      "height": 60
    },
    {
      "id": "56a7dd4203b1ef97",
      "type": "text",
      "text": "### Additional Functionality\n\n- **rewind**: re-reading computed data\n- **rebind**: re-computing data\n- memory management\n- spooling intermediate results",
      "styleAttributes": {},
      "x": 270,
      "y": 3891,
      "width": 265,
      "height": 312,
      "color": "6"
    },
    {
      "id": "1464b9bcbb962388",
      "type": "text",
      "text": "### Table Scan\n\n> literally just the tuples in a relation\n\ncomplexities:\n- navigating physical representation of relation\n- deferred updates, snapshot isolation, etc",
      "styleAttributes": {},
      "x": 230,
      "y": 5186,
      "width": 450,
      "height": 240
    },
    {
      "id": "c82fdbaf0fb4c302",
      "type": "text",
      "text": "E\nF\nF\nI\nC\nI\nE\nN\nT\n\nQ\nU\nE\nR\nY\n\nP\nR\nO\nC\nE\nS\nS\nI\nN\nG",
      "styleAttributes": {},
      "x": 0,
      "y": 3600,
      "width": 80,
      "height": 2384,
      "color": "4"
    },
    {
      "id": "93a138a6e669e18e",
      "type": "text",
      "text": "expressing query processing",
      "styleAttributes": {},
      "x": 660,
      "y": 3703,
      "width": 460,
      "height": 50,
      "color": "3"
    },
    {
      "id": "bf8ac9e6607fa0c3",
      "type": "text",
      "text": "### Join $e_1 \\Join_p e_2$",
      "styleAttributes": {},
      "x": 1209,
      "y": 5000,
      "width": 204,
      "height": 60
    },
    {
      "id": "03fc57613022b7c9",
      "type": "text",
      "text": "### Singleton Join $\\Join^{1J}$\n$|e_1| \\leq 1$ guaranteed",
      "styleAttributes": {},
      "x": 1702,
      "y": 5014,
      "width": 321,
      "height": 120
    },
    {
      "id": "640b77aab9519c46",
      "type": "text",
      "text": "### Selection $\\sigma_p$\n\n> filter using predicate",
      "styleAttributes": {},
      "x": 234,
      "y": 5465,
      "width": 280,
      "height": 120
    },
    {
      "id": "90abb093787ca671",
      "type": "text",
      "text": "### Map $\\chi_{a:f}$\n\n> new column by evaluating $f$\n\n",
      "styleAttributes": {},
      "x": 234,
      "y": 5635,
      "width": 280,
      "height": 140
    },
    {
      "id": "c221953247195880",
      "type": "text",
      "text": "often piggybacked",
      "styleAttributes": {
        "border": "invisible"
      },
      "x": 514,
      "y": 5585,
      "width": 205,
      "height": 60
    },
    {
      "id": "d3b322e041554924",
      "type": "text",
      "text": "# inner workings of queries",
      "styleAttributes": {},
      "x": 140,
      "y": 3721,
      "width": 260,
      "height": 126
    },
    {
      "id": "86c2337a45cd500a",
      "type": "text",
      "text": " `open`, `produce`, `consume`",
      "styleAttributes": {},
      "x": 1834,
      "y": 4385,
      "width": 423,
      "height": 51,
      "color": "6"
    },
    {
      "id": "b29fa5910ce92943",
      "type": "text",
      "text": "| Advantages           | Disadvantages                |\n| -------------------- | ---------------------------- |\n| code + data locality | restrictions in control flow |\n| pipelining           | codegen more involved :/     |\n| DAG-structured plans |                              |\n",
      "styleAttributes": {
        "border": "invisible"
      },
      "x": 1804,
      "y": 4585,
      "width": 482,
      "height": 160
    },
    {
      "id": "b5b00900078df439",
      "type": "text",
      "text": "- produced tuples are pushed towards consuming operators\n- improve locality further?",
      "styleAttributes": {},
      "x": 1834,
      "y": 4465,
      "width": 423,
      "height": 100,
      "color": "3"
    },
    {
      "id": "5dfba0d6706d6060",
      "type": "text",
      "text": "`open`, `next`,`close`",
      "styleAttributes": {},
      "x": 1825,
      "y": 3798,
      "width": 250,
      "height": 57,
      "color": "6"
    },
    {
      "id": "01b716808bf4f71e",
      "type": "text",
      "text": "# specific operators + implementations",
      "styleAttributes": {},
      "x": 165,
      "y": 5001,
      "width": 315,
      "height": 139
    },
    {
      "id": "582189766fe371a2",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Operator Implementation/Push Model.md",
      "styleAttributes": {},
      "x": 2455,
      "y": 3821,
      "width": 1113,
      "height": 924
    },
    {
      "id": "19430bf0a237c13c",
      "type": "text",
      "text": "### Pipelining\n\n> avoid copying data\n\n**pipeline breaker**: operator that does materialize its input\n- **full pipeline breaker**: operator that consumes its input completely before processing\n\nhas consequences for original data ascess, scheduling",
      "styleAttributes": {},
      "x": 3165,
      "y": 3721,
      "width": 423,
      "height": 340,
      "color": "7"
    },
    {
      "id": "a0cda93d08cb487d",
      "type": "text",
      "text": "stream of tuple chunks",
      "styleAttributes": {},
      "x": 1347,
      "y": 4397,
      "width": 160,
      "height": 96,
      "color": "3"
    },
    {
      "id": "db6a4b23ee300b54",
      "type": "text",
      "text": "- `open`\n- `next`\n- `close`",
      "styleAttributes": {},
      "x": 1540,
      "y": 4397,
      "width": 151,
      "height": 100,
      "color": "6"
    },
    {
      "id": "cdb2a2f1d4820623",
      "type": "text",
      "text": "passing data\n- tuple pointers\n- global data space with **registers** (more generic)",
      "styleAttributes": {},
      "x": 1825,
      "y": 4061,
      "width": 499,
      "height": 142,
      "color": "7"
    },
    {
      "id": "385f21a13fcf6d66",
      "type": "text",
      "text": "stream of tuples",
      "styleAttributes": {},
      "x": 2137,
      "y": 3798,
      "width": 187,
      "height": 57,
      "color": "3"
    },
    {
      "id": "c85a41ce4d80ab46",
      "type": "text",
      "text": "| Advantages             | Disadvantages          |\n| ---------------------- | ---------------------- |\n| data is pipelined      | virtual function calls |\n| avoids materialization | poor locality          |\n| flexible control flow  |                        |\n| easy implementation    |                        |",
      "styleAttributes": {
        "border": "invisible"
      },
      "x": 1865,
      "y": 3873,
      "width": 420,
      "height": 186
    },
    {
      "id": "5a522565c71596d7",
      "type": "text",
      "text": "- operators materialize output\n- input read from materialized state",
      "styleAttributes": {},
      "x": 1350,
      "y": 3788,
      "width": 330,
      "height": 118,
      "color": "6"
    },
    {
      "id": "b7871051f580f63a",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/B-Tree/Concurrent Access.md",
      "styleAttributes": {
        "border": "dashed"
      },
      "x": 2705,
      "y": 1885,
      "width": 460,
      "height": 775
    },
    {
      "id": "c0bec59986145049",
      "type": "text",
      "text": "- each node is a page\n- `uint16_t level`\n- `upper` can also be additional entry in `children` ",
      "styleAttributes": {
        "border": "dotted"
      },
      "x": 2732,
      "y": 1690,
      "width": 403,
      "height": 140,
      "color": "7"
    },
    {
      "id": "fed63abcd7574410",
      "type": "text",
      "text": "finding data",
      "styleAttributes": {},
      "x": 1785,
      "y": 2060,
      "width": 260,
      "height": 60,
      "color": "3"
    },
    {
      "id": "9a5a687acb947b70",
      "type": "text",
      "text": "- point/range queries\n- `insert`, `lookup`, `erase`",
      "styleAttributes": {},
      "x": 1785,
      "y": 2160,
      "width": 260,
      "height": 120,
      "color": "6"
    },
    {
      "id": "7532720dc6c59ea9",
      "type": "text",
      "text": "**special cases for indexing**",
      "styleAttributes": {},
      "x": 1780,
      "y": 2366,
      "width": 271,
      "height": 60,
      "color": "8"
    },
    {
      "id": "467721a44a6a6684",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/B-Tree/Prefix B⁺-tree.md",
      "styleAttributes": {
        "border": "dashed"
      },
      "x": 2235,
      "y": 3073,
      "width": 417,
      "height": 300
    },
    {
      "id": "ac2e328d15f081ff",
      "type": "text",
      "text": "### Multiple Attributes\n> compound keys\n\n- compared lexicographically\n- either all attributes bound or suffix as range",
      "styleAttributes": {},
      "x": 1645,
      "y": 2870,
      "width": 460,
      "height": 180
    },
    {
      "id": "04a55febc65e9cd7",
      "type": "text",
      "text": "### Small Materialized Aggregates\n\n> cache info in aggregate -> depending on predicate x aggregate, chunks can be skipped\n\n- data in physical chunks: clustering via insertion. older chunks usually static\n- similar to cache. update eagerly/lazily\n- e.g. `min`, `max`, `sum`, `count`\n",
      "styleAttributes": {},
      "x": 1645,
      "y": 3120,
      "width": 519,
      "height": 280
    },
    {
      "id": "96268e8d632a9637",
      "type": "text",
      "text": "- faster than search trees **in main memory**\n- versions for disk exist\n- useful for primary key indexes (uniqueness)",
      "styleAttributes": {},
      "x": 1135,
      "y": 2175,
      "width": 420,
      "height": 160,
      "color": "3"
    },
    {
      "id": "9ab5bdf62a66c1f5",
      "type": "text",
      "text": "| Advantages                             | Disadvantages    |\n| -------------------------------------- | ---------------- |\n| easy implementation                    | expensive        |\n| dynamic plans                          | data > memory..? |\n| simple parallelization, result sharing |                  |\n",
      "styleAttributes": {
        "border": "invisible"
      },
      "x": 1320,
      "y": 3906,
      "width": 400,
      "height": 200
    },
    {
      "id": "e65dca0767f49f30",
      "type": "text",
      "text": "TODO: why?",
      "styleAttributes": {},
      "x": 3205,
      "y": 1690,
      "width": 400,
      "height": 60,
      "color": "3"
    },
    {
      "id": "26ce161aa264426a",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/B-Tree/Details.md",
      "styleAttributes": {},
      "x": 3205,
      "y": 1903,
      "width": 400,
      "height": 1470,
      "color": "8"
    },
    {
      "id": "8a1cd74083f166f1",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/B-Tree/Variable length records.md",
      "styleAttributes": {
        "border": "dashed"
      },
      "x": 2734,
      "y": 2777,
      "width": 431,
      "height": 593
    },
    {
      "id": "ddb67a4f882dcb53",
      "type": "text",
      "text": "TODO: what exactly does clustering mean here again?",
      "styleAttributes": {},
      "x": 1886,
      "y": 1665,
      "width": 260,
      "height": 120,
      "color": "1"
    },
    {
      "id": "38066558b29ac7e7",
      "type": "text",
      "text": "TODO: understand bulk update :´D",
      "styleAttributes": {},
      "x": 1901,
      "y": 1855,
      "width": 260,
      "height": 60,
      "color": "1"
    },
    {
      "id": "4e36568296809796",
      "type": "text",
      "text": "faster processing of unselective predicates using table scans",
      "styleAttributes": {},
      "x": 1204,
      "y": 1680,
      "width": 401,
      "height": 90,
      "color": "3"
    },
    {
      "id": "c21c0379706b9e66",
      "type": "text",
      "text": "- 1 bitnap per attribute value\n- index intersections = bit operations",
      "styleAttributes": {},
      "x": 1204,
      "y": 1800,
      "width": 400,
      "height": 85,
      "color": "7"
    },
    {
      "id": "3a4c0b8f339ab43b",
      "type": "text",
      "text": "### Details\n\n- nice compressions\n- especially run-length encoding",
      "styleAttributes": {},
      "x": 1205,
      "y": 1920,
      "width": 400,
      "height": 140,
      "color": "8"
    },
    {
      "id": "1a9b069fcb563fdf",
      "type": "text",
      "text": "- B-Tree: nodes with k~2k entries (key + TID)\n- B⁺-Tree: values only in leaf nodes\n\t- more flexible separators\n\t- higher fanout of inner nodes",
      "styleAttributes": {},
      "x": 2244,
      "y": 1690,
      "width": 400,
      "height": 185,
      "color": "7"
    },
    {
      "id": "4f4f2f55d8427f76",
      "type": "text",
      "text": "point queries only",
      "styleAttributes": {},
      "x": 235,
      "y": 1966,
      "width": 420,
      "height": 60,
      "color": "6"
    },
    {
      "id": "24e8b8a052ab8fa8",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Hashing/Extendible Hashing.md",
      "styleAttributes": {},
      "x": 690,
      "y": 1966,
      "width": 420,
      "height": 1234
    },
    {
      "id": "7a07851e147a9ab3",
      "type": "text",
      "text": "sharing table entries allows for growth + avoids rehashing",
      "styleAttributes": {},
      "x": 235,
      "y": 2060,
      "width": 420,
      "height": 70,
      "color": "7"
    },
    {
      "id": "e107c7414cbf34cd",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/Hashing/Linear Hashing.md",
      "styleAttributes": {},
      "x": 235,
      "y": 2235,
      "width": 420,
      "height": 1039
    },
    {
      "id": "6a1e69b178507769",
      "type": "file",
      "file": "notes/DBS + moderne CPU-Architekturen/Summary/Details/B-Tree/Bulkloading.md",
      "styleAttributes": {
        "border": "dashed"
      },
      "x": 2238,
      "y": 1940,
      "width": 412,
      "height": 1020
    },
    {
      "id": "b2a7f055e8a0b077",
      "type": "text",
      "text": "# finding data",
      "styleAttributes": {},
      "x": 125,
      "y": 1680,
      "width": 260,
      "height": 60
    },
    {
      "id": "b8eea1dc29e29617",
      "type": "text",
      "text": "TODO: how do registers work exactly?",
      "styleAttributes": {},
      "x": 2127,
      "y": 4223,
      "width": 260,
      "height": 60,
      "color": "1"
    },
    {
      "id": "e2d70fa28a273dd5",
      "type": "text",
      "text": "### Pages\n\n>main granularity for I/O, memory management, recovery\n\n- sth like 4096 bytes",
      "styleAttributes": {
        "border": "dashed"
      },
      "x": 1252,
      "y": 624,
      "width": 284,
      "height": 195,
      "color": "8"
    }
  ],
  "edges": [
    {
      "id": "64c4d2cb6625475c",
      "styleAttributes": {},
      "fromNode": "937214675b57c1a8",
      "fromSide": "right",
      "toNode": "e2d70fa28a273dd5",
      "toSide": "top",
      "toEnd": "none"
    },
    {
      "id": "ed1d80e3b449914c",
      "styleAttributes": {},
      "fromNode": "e2d70fa28a273dd5",
      "fromSide": "bottom",
      "toNode": "5256150df55fb029",
      "toSide": "right",
      "toEnd": "none"
    },
    {
      "id": "fe21aa3180b0e215",
      "styleAttributes": {},
      "fromNode": "17081ade73d7b013",
      "fromSide": "right",
      "toNode": "32aa6feb6beb46e9",
      "toSide": "bottom"
    },
    {
      "id": "971e91c64d6791fb",
      "styleAttributes": {},
      "fromNode": "32aa6feb6beb46e9",
      "fromSide": "right",
      "toNode": "fc3485f7fad72c99",
      "toSide": "left",
      "toEnd": "none"
    },
    {
      "id": "ece8b6d99bffb75e",
      "styleAttributes": {},
      "fromNode": "32aa6feb6beb46e9",
      "fromSide": "right",
      "toNode": "b4f2a1762d0e7758",
      "toSide": "left",
      "toEnd": "none"
    },
    {
      "id": "a3976427dca04aa9",
      "styleAttributes": {},
      "fromNode": "c7f6002a3d5b3e56",
      "fromSide": "left",
      "toNode": "a3787a5c0e584308",
      "toSide": "right",
      "toEnd": "none"
    },
    {
      "id": "619c921cb27de38f",
      "styleAttributes": {},
      "fromNode": "54edf63446437e2c",
      "fromSide": "left",
      "toNode": "e2d70fa28a273dd5",
      "toSide": "right",
      "toEnd": "none"
    },
    {
      "id": "2865df6fc5fef9d6",
      "styleAttributes": {},
      "fromNode": "b99940e85b8fec83",
      "fromSide": "top",
      "toNode": "3c55b9f3d03d5e5f",
      "toSide": "bottom",
      "toEnd": "none"
    },
    {
      "id": "a945a9fcfdc7a7cd",
      "styleAttributes": {},
      "fromNode": "3c55b9f3d03d5e5f",
      "fromSide": "left",
      "toNode": "bcae98ec2fe87e04",
      "toSide": "right",
      "toEnd": "none"
    },
    {
      "id": "953c224069b13a30",
      "styleAttributes": {},
      "fromNode": "3c55b9f3d03d5e5f",
      "fromSide": "right",
      "toNode": "4e28f9173920ddd0",
      "toSide": "left",
      "toEnd": "none"
    },
    {
      "id": "3977ddad5287ec86",
      "styleAttributes": {},
      "fromNode": "3c55b9f3d03d5e5f",
      "fromSide": "left",
      "toNode": "133b29e6c6012565",
      "toSide": "right",
      "toEnd": "none"
    },
    {
      "id": "a1f46fabdf732f13",
      "styleAttributes": {},
      "fromNode": "7532720dc6c59ea9",
      "fromSide": "bottom",
      "toNode": "ac2e328d15f081ff",
      "toSide": "top",
      "toEnd": "none"
    },
    {
      "id": "c72c46ed09f91300",
      "styleAttributes": {},
      "fromNode": "7532720dc6c59ea9",
      "fromSide": "bottom",
      "toNode": "5b30828bbbfab1bf",
      "toSide": "top",
      "toEnd": "none"
    },
    {
      "id": "7fd18a313c70c54e",
      "styleAttributes": {},
      "fromNode": "c10bb6c9171ba0f2",
      "fromSide": "right",
      "toNode": "b1aa0dd719e65330",
      "toSide": "left",
      "toEnd": "none"
    },
    {
      "id": "bf4e03330e1994c5",
      "styleAttributes": {},
      "fromNode": "7532720dc6c59ea9",
      "fromSide": "top",
      "toNode": "c10bb6c9171ba0f2",
      "toSide": "bottom",
      "toEnd": "none"
    },
    {
      "id": "097fda7ae17e4688",
      "styleAttributes": {},
      "fromNode": "8a1cd74083f166f1",
      "fromSide": "left",
      "toNode": "467721a44a6a6684",
      "toSide": "right"
    },
    {
      "id": "dc2d9a0466eed8a6",
      "styleAttributes": {},
      "fromNode": "24e8b8a052ab8fa8",
      "fromSide": "bottom",
      "toNode": "3d37cea48b7c879a",
      "toSide": "bottom",
      "label": "data skew?"
    },
    {
      "id": "08ff8589e5cf8660",
      "styleAttributes": {},
      "fromNode": "c10bb6c9171ba0f2",
      "fromSide": "left",
      "toNode": "3f6d4b6e1128e072",
      "toSide": "right",
      "toEnd": "none"
    },
    {
      "id": "6a66aaa099e53713",
      "styleAttributes": {},
      "fromNode": "c10bb6c9171ba0f2",
      "fromSide": "left",
      "toNode": "002b979a84919102",
      "toSide": "right",
      "toEnd": "none"
    },
    {
      "id": "e1a41170f2a1016a",
      "styleAttributes": {},
      "fromNode": "1be70e7f2fd64795",
      "fromSide": "bottom",
      "toNode": "449e995c75b06d05",
      "toSide": "top"
    },
    {
      "id": "ecc60d8e6cb15a61",
      "styleAttributes": {},
      "fromNode": "e23de4404dfad79b",
      "fromSide": "bottom",
      "toNode": "f0e9e6645918c934",
      "toSide": "top",
      "label": "less function calls"
    },
    {
      "id": "a536e01ec7511ff6",
      "styleAttributes": {},
      "fromNode": "f0e9e6645918c934",
      "fromSide": "right",
      "toNode": "7ef59e1bf8e51969",
      "toSide": "left"
    },
    {
      "id": "39b005d50d0595b9",
      "styleAttributes": {},
      "fromNode": "88fb8fc0c7af39a3",
      "fromSide": "bottom",
      "toNode": "e23de4404dfad79b",
      "toSide": "left",
      "label": "avoid\nmaterialization"
    },
    {
      "id": "838796e1f54941dd",
      "styleAttributes": {},
      "fromNode": "7ef59e1bf8e51969",
      "fromSide": "right",
      "toNode": "582189766fe371a2",
      "toSide": "left",
      "toEnd": "none"
    },
    {
      "id": "943118bf25de0a64",
      "styleAttributes": {},
      "fromNode": "1be70e7f2fd64795",
      "fromSide": "right",
      "toNode": "dc0723debf9d3ece",
      "toSide": "left"
    },
    {
      "id": "26ff5f66c4c51c3e",
      "styleAttributes": {},
      "fromNode": "1be70e7f2fd64795",
      "fromSide": "left",
      "toNode": "1b1580da2b9aaf3b",
      "toSide": "top"
    },
    {
      "id": "0674f8e1d4eea3f6",
      "styleAttributes": {},
      "fromNode": "640b77aab9519c46",
      "fromSide": "right",
      "toNode": "c221953247195880",
      "toSide": "top"
    },
    {
      "id": "e6309045bdde6545",
      "styleAttributes": {},
      "fromNode": "bf8ac9e6607fa0c3",
      "fromSide": "bottom",
      "toNode": "52206d5410c9e280",
      "toSide": "top",
      "label": "implementation depends"
    },
    {
      "id": "eac55852e13f1042",
      "styleAttributes": {},
      "fromNode": "52206d5410c9e280",
      "fromSide": "left",
      "toNode": "5b98697860cbf7ae",
      "toSide": "right",
      "color": "7",
      "label": "yes"
    },
    {
      "id": "e2f58e866b569917",
      "styleAttributes": {},
      "fromNode": "52206d5410c9e280",
      "fromSide": "right",
      "toNode": "08906c42a7c83995",
      "toSide": "left",
      "color": "7",
      "label": "no"
    },
    {
      "id": "f8054e7de6a8a62b",
      "styleAttributes": {},
      "fromNode": "08906c42a7c83995",
      "fromSide": "bottom",
      "toNode": "41264f880ecb0244",
      "toSide": "right",
      "color": "7",
      "label": "no"
    },
    {
      "id": "1d2558cb389bd05e",
      "styleAttributes": {},
      "fromNode": "08906c42a7c83995",
      "fromSide": "bottom",
      "toNode": "5b98697860cbf7ae",
      "toSide": "right",
      "color": "7",
      "label": "no"
    },
    {
      "id": "5cb41b1da1bcdba2",
      "styleAttributes": {},
      "fromNode": "08906c42a7c83995",
      "fromSide": "right",
      "toNode": "4d88b500c9455b3d",
      "toSide": "left",
      "color": "7",
      "label": "yes"
    },
    {
      "id": "fcc5bb842232fdb4",
      "styleAttributes": {},
      "fromNode": "4d88b500c9455b3d",
      "fromSide": "bottom",
      "toNode": "65ce556e21aa0237",
      "toSide": "top"
    },
    {
      "id": "c8add700f80c41a0",
      "styleAttributes": {},
      "fromNode": "4d88b500c9455b3d",
      "fromSide": "right",
      "toNode": "56ee2dd1eba1de27",
      "toSide": "left"
    },
    {
      "id": "6bf8450f4be73b8a",
      "styleAttributes": {},
      "fromNode": "4d88b500c9455b3d",
      "fromSide": "top",
      "toNode": "03fc57613022b7c9",
      "toSide": "bottom"
    },
    {
      "id": "214699e8bd532cd2",
      "styleAttributes": {
        "pathfindingMethod": null
      },
      "fromNode": "795cdbea48e95476",
      "fromSide": "right",
      "toNode": "5f993d240e622e35",
      "toSide": "left",
      "toEnd": "none"
    },
    {
      "id": "1706f5668c9f541a",
      "styleAttributes": {},
      "fromNode": "90abb093787ca671",
      "fromSide": "right",
      "toNode": "c221953247195880",
      "toSide": "bottom"
    },
    {
      "id": "7299afc2a862faaf",
      "styleAttributes": {},
      "fromNode": "dc0723debf9d3ece",
      "fromSide": "bottom",
      "toNode": "d9b7e6fe27e2289a",
      "toSide": "top"
    },
    {
      "id": "5fb6eb6f95ff9455",
      "styleAttributes": {},
      "fromNode": "1a9b069fcb563fdf",
      "fromSide": "right",
      "toNode": "c0bec59986145049",
      "toSide": "left",
      "toEnd": "none",
      "color": "7"
    },
    {
      "id": "4e9721ebfcd097a9",
      "styleAttributes": {},
      "fromNode": "c0bec59986145049",
      "fromSide": "right",
      "toNode": "26ce161aa264426a",
      "toSide": "top"
    },
    {
      "id": "9d65e253bf2fc5b3",
      "styleAttributes": {},
      "fromNode": "f5985ee0d558d2e1",
      "fromSide": "bottom",
      "toNode": "b1aa0dd719e65330",
      "toSide": "top",
      "label": "TIDs are values"
    }
  ],
  "metadata": {}
}